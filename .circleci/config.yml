# For a detailed guide to building and testing on iOS, read the docs:
# https://circleci.com/docs/2.0/testing-ios/

version: 2.1

jobs:
  build:

    macos:
      xcode: 11.4.1 # Specify the Xcode version to use

    steps:
      - checkout
      #Configure github Repo

      - run:
          name: Pull Submodules
          command: |
            git submodule init 
            git submodule update --remote

      #Check init
      - run:
          name: check init
          command: |
            swift --version
            cat /etc/shells
            ls -la

      - restore_cache:
          keys:
            - v1-dependencies
      - run:
          name: Install prerequisites
          command: |
            sudo gem install xcpretty 
            brew --cache
            brew install ghostscript SwiftLint


      # save cache
      - save_cache:
          paths:
            - ~/Library/Caches/Homebrew

          key: v1-dependencies
          
      - run:
          name: check  Key
          command: |
            mkdir -p ~/cert
            
            echo $IOS_DISTRIBUTION_P12 > ~/cert/base64p12
            base64 -d  ~/cert/base64p12 > ~/cert/ios_distribution.p12
            ls -la ~/cert
            

      - run:
          name: install  Key
          command: |
            security create-keychain -p test  ~/Library/Keychains/default.keychain
            security unlock-keychain -p test ~/Library/Keychains/default.keychain

           
            security import ~/cert/ios_distribution.p12 -t agg  -P $IOS_DISTRIBUTION_P12_PASS -k ~/Library/Keychains/default.keychain
            security find-certificate -a  ~/Library/Keychains/default.keychain
           
            security default-keychain -s ~/Library/Keychains/default.keychain


            
      - run:
          name: check   Key
          command: |
             security list-keychains -d user -s ~/Library/Keychains/default.keychain    
             
      - run:
          name: Rename provision 
          command: |
            sed "s/PRODUCT_BUNDLE_IDENTIFIER = cash.just.wallet;/PRODUCT_BUNDLE_IDENTIFIER = cash.just.wallet;\                PROVISIONING_PROFILE_SPECIFIER = wallet-CNI-distribution2;\                CODE_SIGN_IDENTITY = \"iPhone Distribution\";\                CODE_SIGN_STYLE = Manual;/g"  breadwallet.xcodeproj/project.pbxproj  > breadwallet.xcodeproj/project.pbxproj.rnm

            cp breadwallet.xcodeproj/project.pbxproj.rnm breadwallet.xcodeproj/project.pbxproj 
            mkdir test_output
            cp breadwallet.xcodeproj/project.pbxproj.rnm test_output
            uuid=`grep UUID -A1 -a .circleci/mobileprovision/wallet-CNI-distribution2.mobileprovision | grep -io "[-A-F0-9]\{36\}"`
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp .circleci/mobileprovision/wallet-CNI-distribution2.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$uuid.mobileprovision
            ls -la ~/Library/MobileDevice/Provisioning\ Profiles
            
            git status
            
      - run:
          name: xcodebuild help 
          command: |
            xcodebuild --help
            xcodebuild -project breadwallet.xcodeproj -list
                        
      - run:
          name: xcodebuild clean 
          command: |
            xcodebuild clean -workspace breadwallet.xcworkspace -scheme breadwallet | xcpretty
            
      - run:
          name: xcodebuild  build submodules
          command: |
            security default-keychain
            security unlock-keychain -p test ~/Library/Keychains/default.keychain
            xcodebuild  build  -verbose   -workspace breadwallet.xcworkspace   -scheme submodules | xcpretty
            
      - run:
          name: makebuild 
          command: |
            security default-keychain
            security unlock-keychain -p test ~/Library/Keychains/default.keychain
            git add --all * 
            git commit -m "circleci build"
            mkdir build
            cp .circleci/config/exportOptions.plist build
            ./scripts/makebuild.sh 4.0 44 ci  
            
      - run:
          name: xcodebuild  build (disabled)
          command: |
            security default-keychain
            security unlock-keychain -p test ~/Library/Keychains/default.keychain
            echo xcodebuild  build  -verbose   -workspace breadwallet.xcworkspace   -scheme breadwallet | xcpretty

      - run:
          name: after build check
          command: |
            ls -la build
            ls -la .
      - run:
          name: xcodebuild  test
          command: |
            xcodebuild test -workspace breadwallet.xcworkspace -scheme breadwallet -destination 'platform=iOS Simulator,name=iPhone XR,OS=12.4' | xcpretty -s

            
      # Collect XML test results data to show in the UI, and save the same XML
      # files under test-results folder in the Artifacts tab
      - store_test_results:
          path: test_output
      - store_artifacts:
          path: test_output
          destination: scan-output
